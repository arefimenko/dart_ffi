// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class CppExamples {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CppExamples(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CppExamples.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void printChar(
    ffi.Pointer<ffi.Char> c,
  ) {
    return _printChar(
      c,
    );
  }

  late final _printCharPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>('printChar');
  late final _printChar = _printCharPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  double arraySum(
    ffi.Pointer<ffi.Float> arr,
  ) {
    return _arraySum(
      arr,
    );
  }

  late final _arraySumPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Float>)>>('arraySum');
  late final _arraySum = _arraySumPtr.asFunction<double Function(ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ffi.Char> getChar() {
    return _getChar();
  }

  late final _getCharPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getChar');
  late final _getChar = _getCharPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}
