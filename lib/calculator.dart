// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class CalculatorBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalculatorBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalculatorBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int> _Calculator = _lookup<ffi.Int>('Calculator');

  int get Calculator => _Calculator.value;

  set Calculator(int value) => _Calculator.value = value;

  ffi.Pointer<ffi.Int> createCalc(
    IntCallback callback,
  ) {
    return _createCalc(
      callback,
    );
  }

  late final _createCalcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(IntCallback)>>(
          'createCalc');
  late final _createCalc =
      _createCalcPtr.asFunction<ffi.Pointer<ffi.Int> Function(IntCallback)>();

  ffi.Pointer<ffi.Int> createCalcWithInitialValue(
    int initial,
    IntCallback callback,
  ) {
    return _createCalcWithInitialValue(
      initial,
      callback,
    );
  }

  late final _createCalcWithInitialValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Int, IntCallback)>>('createCalcWithInitialValue');
  late final _createCalcWithInitialValue = _createCalcWithInitialValuePtr
      .asFunction<ffi.Pointer<ffi.Int> Function(int, IntCallback)>();

  void add(
    ffi.Pointer<ffi.Int> calc,
    int a,
  ) {
    return _add(
      calc,
      a,
    );
  }

  late final _addPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'add');
  late final _add =
      _addPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void subtract(
    ffi.Pointer<ffi.Int> calc,
    int a,
  ) {
    return _subtract(
      calc,
      a,
    );
  }

  late final _subtractPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'subtract');
  late final _subtract =
      _subtractPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void divide(
    ffi.Pointer<ffi.Int> calc,
    int a,
  ) {
    return _divide(
      calc,
      a,
    );
  }

  late final _dividePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'divide');
  late final _divide =
      _dividePtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void multiply(
    ffi.Pointer<ffi.Int> calc,
    int a,
  ) {
    return _multiply(
      calc,
      a,
    );
  }

  late final _multiplyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'multiply');
  late final _multiply =
      _multiplyPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int getResult(
    ffi.Pointer<ffi.Int> calc,
  ) {
    return _getResult(
      calc,
    );
  }

  late final _getResultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'getResult');
  late final _getResult =
      _getResultPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();
}

typedef IntCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>;
