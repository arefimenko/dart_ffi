// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class CalculatorBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalculatorBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalculatorBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<Calculator> createCalc(
    IntCallback callback,
  ) {
    return _createCalc(
      callback,
    );
  }

  late final _createCalcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Calculator> Function(IntCallback)>>('createCalc');
  late final _createCalc =
      _createCalcPtr.asFunction<ffi.Pointer<Calculator> Function(IntCallback)>();

  ffi.Pointer<Calculator> createCalcWithInitialValue(
    int initial,
    IntCallback callback,
  ) {
    return _createCalcWithInitialValue(
      initial,
      callback,
    );
  }

  late final _createCalcWithInitialValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Calculator> Function(ffi.Int, IntCallback)>>(
          'createCalcWithInitialValue');
  late final _createCalcWithInitialValue = _createCalcWithInitialValuePtr
      .asFunction<ffi.Pointer<Calculator> Function(int, IntCallback)>();

  void add(
    ffi.Pointer<Calculator> calc,
    int a,
  ) {
    return _add(
      calc,
      a,
    );
  }

  late final _addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Calculator>, ffi.Int)>>('add');
  late final _add = _addPtr.asFunction<void Function(ffi.Pointer<Calculator>, int)>();

  void subtract(
    ffi.Pointer<Calculator> calc,
    int a,
  ) {
    return _subtract(
      calc,
      a,
    );
  }

  late final _subtractPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Calculator>, ffi.Int)>>('subtract');
  late final _subtract = _subtractPtr.asFunction<void Function(ffi.Pointer<Calculator>, int)>();

  void divide(
    ffi.Pointer<Calculator> calc,
    int a,
  ) {
    return _divide(
      calc,
      a,
    );
  }

  late final _dividePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Calculator>, ffi.Int)>>('divide');
  late final _divide = _dividePtr.asFunction<void Function(ffi.Pointer<Calculator>, int)>();

  void multiply(
    ffi.Pointer<Calculator> calc,
    int a,
  ) {
    return _multiply(
      calc,
      a,
    );
  }

  late final _multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Calculator>, ffi.Int)>>('multiply');
  late final _multiply = _multiplyPtr.asFunction<void Function(ffi.Pointer<Calculator>, int)>();

  int getResult(
    ffi.Pointer<Calculator> calc,
  ) {
    return _getResult(
      calc,
    );
  }

  late final _getResultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Calculator>)>>('getResult');
  late final _getResult = _getResultPtr.asFunction<int Function(ffi.Pointer<Calculator>)>();
}

final class Calculator extends ffi.Struct {
  @ffi.Int()
  external int result;

  external IntCallback resultCallback;
}

typedef IntCallback = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>;
